<p>Hello World!</p>
<svg width="960" height="500"></svg>
<!--<script>-->
// var d3 = require('../bower_components/d3/d3.min.js');

<!--    var origin = [480, 300], j = 10, scale = 20, scatter = [], yLine = [], xGrid = [], beta = 0, alpha = 0, key = function(d){ return d.id; }, startAngle = Math.PI/4;-->
<!--    var svg    = d3.select('svg').call(d3.drag().on('drag', dragged).on('start', dragStart).on('end', dragEnd)).append('g');-->
<!--    var color  = d3.scaleOrdinal(d3.schemeCategory20);-->
<!--    var mx, my, mouseX, mouseY;-->

<!--    var grid3d = d3._3d()-->
<!--        .shape('GRID', 20)-->
<!--        .origin(origin)-->
<!--        .rotateY( startAngle)-->
<!--        .rotateX(-startAngle)-->
<!--        .scale(scale);-->

<!--    var point3d = d3._3d()-->
<!--        .x(function(d){ return d.x; })-->
<!--        .y(function(d){ return d.y; })-->
<!--        .z(function(d){ return d.z; })-->
<!--        .origin(origin)-->
<!--        .rotateY( startAngle)-->
<!--        .rotateX(-startAngle)-->
<!--        .scale(scale);-->

<!--    var yScale3d = d3._3d()-->
<!--        .shape('LINE_STRIP')-->
<!--        .origin(origin)-->
<!--        .rotateY( startAngle)-->
<!--        .rotateX(-startAngle)-->
<!--        .scale(scale);-->

<!--    function processData(data, tt){-->

        /* ----------- GRID ----------- */

<!--        var xGrid = svg.selectAll('path.grid').data(data[0], key);-->

<!--        xGrid-->
<!--            .enter()-->
<!--            .append('path')-->
<!--            .attr('class', '_3d grid')-->
<!--            .merge(xGrid)-->
<!--            .attr('stroke', 'black')-->
<!--            .attr('stroke-width', 0.3)-->
<!--            .attr('fill', function(d){ return d.ccw ? 'lightgrey' : '#717171'; })-->
<!--            .attr('fill-opacity', 0.9)-->
<!--            .attr('d', grid3d.draw);-->

<!--        xGrid.exit().remove();-->

        /* ----------- POINTS ----------- */

<!--        var points = svg.selectAll('circle').data(data[1], key);-->

<!--        points-->
<!--            .enter()-->
<!--            .append('circle')-->
<!--            .attr('class', '_3d')-->
<!--            .attr('opacity', 0)-->
<!--            .attr('cx', posPointX)-->
<!--            .attr('cy', posPointY)-->
<!--            .merge(points)-->
<!--            .transition().duration(tt)-->
<!--            .attr('r', 3)-->
<!--            .attr('stroke', function(d){ return d3.color(color(d.id)).darker(3); })-->
<!--            .attr('fill', function(d){ return color(d.id); })-->
<!--            .attr('opacity', 1)-->
<!--            .attr('cx', posPointX)-->
<!--            .attr('cy', posPointY);-->

<!--        points.exit().remove();-->

        /* ----------- y-Scale ----------- */

<!--        var yScale = svg.selectAll('path.yScale').data(data[2]);-->

<!--        yScale-->
<!--            .enter()-->
<!--            .append('path')-->
<!--            .attr('class', '_3d yScale')-->
<!--            .merge(yScale)-->
<!--            .attr('stroke', 'black')-->
<!--            .attr('stroke-width', .5)-->
<!--            .attr('d', yScale3d.draw);-->

<!--        yScale.exit().remove();-->

         /* ----------- y-Scale Text ----------- */

<!--        var yText = svg.selectAll('text.yText').data(data[2][0]);-->

<!--        yText-->
<!--            .enter()-->
<!--            .append('text')-->
<!--            .attr('class', '_3d yText')-->
<!--            .attr('dx', '.3em')-->
<!--            .merge(yText)-->
<!--            .each(function(d){-->
<!--                d.centroid = {x: d.rotated.x, y: d.rotated.y, z: d.rotated.z};-->
<!--            })-->
<!--            .attr('x', function(d){ return d.projected.x; })-->
<!--            .attr('y', function(d){ return d.projected.y; })-->
<!--            .text(function(d){ return d[1] <= 0 ? d[1] : ''; });-->

<!--        yText.exit().remove();-->

<!--        d3.selectAll('._3d').sort(d3._3d().sort);-->
<!--    }-->

<!--    function posPointX(d){-->
<!--        return d.projected.x;-->
<!--    }-->

<!--    function posPointY(d){-->
<!--        return d.projected.y;-->
<!--    }-->

<!--	function init(){-->
<!--        var cnt = 0;-->
<!--        xGrid = [], scatter = [], yLine = [];-->
<!--        for(var z = -j; z < j; z++){-->
<!--            for(var x = -j; x < j; x++){-->
<!--                xGrid.push([x, 1, z]);-->
<!--                scatter.push({x: x, y: d3.randomUniform(0, -10)(), z: z, id: 'point_' + cnt++});-->
<!--            }-->
<!--        }-->

<!--        d3.range(-1, 11, 1).forEach(function(d){ yLine.push([-j, -d, -j]); });-->

<!--        var data = [-->
<!--            grid3d(xGrid),-->
<!--            point3d(scatter),-->
<!--            yScale3d([yLine])-->
<!--        ];-->
<!--        processData(data, 1000);-->
<!--    }-->

<!--    function dragStart(){-->
<!--        mx = d3.event.x;-->
<!--        my = d3.event.y;-->
<!--    }-->

<!--    function dragged(){-->
<!--        mouseX = mouseX || 0;-->
<!--        mouseY = mouseY || 0;-->
<!--        beta   = (d3.event.x - mx + mouseX) * Math.PI / 230 ;-->
<!--        alpha  = (d3.event.y - my + mouseY) * Math.PI / 230  * (-1);-->
<!--        var data = [-->
<!--             grid3d.rotateY(beta + startAngle).rotateX(alpha - startAngle)(xGrid),-->
<!--            point3d.rotateY(beta + startAngle).rotateX(alpha - startAngle)(scatter),-->
<!--            yScale3d.rotateY(beta + startAngle).rotateX(alpha - startAngle)([yLine]),-->
<!--        ];-->
<!--        processData(data, 0);-->
<!--    }-->

<!--    function dragEnd(){-->
<!--        mouseX = d3.event.x - mx + mouseX;-->
<!--        mouseY = d3.event.y - my + mouseY;-->
<!--    }-->

<!--    d3.selectAll('button').on('click', init);-->

<!--    init();-->
<!--</script>-->

<!--<script>-->
<!--    var origin  = [400, 200], alpha = Math.PI/4, beta = 0.615472907, data = [], max = 4, min = -max, rad = Math.PI/180;-->
 
// svgタグにグラフを描くので、HTMLファイルのどこかにsvgタグがないといけません。
<!--var svg     = d3.select('svg');-->
<!--var color   = d3.scaleOrdinal(d3.schemeCategory10);-->
 
// 5つの折れ線グラフのデータをランダムに作成します。
<!--var rn      = function(min, max){ return Math.round(d3.randomUniform(min, max + 1)()); };-->
 
<!--d3.range(-4, 5, 2).forEach(function(i){-->
    // (x, y, z)の値を、7セット、配列で保持します。これが1つの折れ線になります。
<!--    var o = [-->
<!--        [ 3,      0      , i],-->
<!--        [ 2, rn(min, max), i],-->
<!--        [ 1, rn(min, max), i],-->
<!--        [ 0, rn(min, max), i],-->
<!--        [-1, rn(min, max), i],-->
<!--        [-2, rn(min, max), i],-->
<!--        [-3,      0      , i]-->
<!--    ];-->
    data.push(o); // 変数dataに折れ線のデータを登録
<!--});-->
 
// グラフの描画
<!--function processData(data){-->
<!--  var linesStrip = svg.selectAll('path').data(data);-->
<!--  linesStrip-->
<!--    .enter()-->
<!--    .append('path')-->
<!--    .merge(linesStrip)-->
<!--    .attr('fill', 'none')-->
<!--    .attr('stroke', function(d, i){ return color(i); })-->
<!--    .attr('stroke-width', 2)-->
<!--    .sort(function(a, b){ return b[0].rotated.z - a[0].rotated.z; })-->
<!--    .attr('d', _3d.draw);-->
    
<!--  linesStrip.exit().remove();-->
<!--}-->
 
// D3-3Dのオブジェクトを作成します。
<!--var _3d = d3._3d()-->
    .scale(30) // scaleは、グラフの拡大率です。
<!--    .origin(origin)-->
<!--    .shape('LINE_STRIP')-->
<!--    .rotateX(alpha)-->
<!--    .rotateY(beta);-->
 
<!--var data3D = _3d(data);-->
 
<!--processData(data);-->
 
// グラフのY軸を、一定間隔で回転させます。
<!--setInterval(function(){-->
<!--    beta += rad;-->
<!--    processData(_3d.rotateY(beta)(data));-->
<!--}, 40);-->
<!--</script>-->



<!--<script>-->
<!--    var origin = [480, 300], j = 10, scale = 20, scatter = [], yLine = [], xGrid = [], beta = 0, alpha = 0, key = function(d){ return d.id; }, startAngle = Math.PI/4;-->
<!--    var svg    = d3.select('svg').call(d3.drag().on('drag', dragged).on('start', dragStart).on('end', dragEnd)).append('g');-->
<!--    var color  = d3.scaleOrdinal(d3.schemeCategory20);-->
<!--    var mx, my, mouseX, mouseY;-->

    var grid3d = d3._3d()     //create a new 3d function object
        .shape('GRID', 20)    // set the shape
<!--        .origin(origin)-->
        .rotateY( startAngle)    // set the angle for the y rotation
        .rotateX(-startAngle)    // set the angle for the x rotation
        .scale(scale);           //create a new 3d function object

    var point3d = d3._3d()    //create a new 3d function object
        .x(function(d){ return d.x; })  // set the x accessor
        .y(function(d){ return d.y; })  // set the y accessor
        .z(function(d){ return d.z; })  // set the z accessor
<!--        .origin(origin)-->
        .rotateY( startAngle)     // set the angle for the y rotation
        .rotateX(-startAngle)     // set the angle for the x rotation
        .scale(scale);            //create a new 3d function object

    var yScale3d = d3._3d()    //create a new 3d function object
        .shape('LINE_STRIP')    // set the shape
<!--        .origin(origin)-->
        .rotateY( startAngle)    // set the angle for the y rotation
        .rotateX(-startAngle)    // set the angle for the x rotation
        .scale(scale);            //create a new 3d function object

<!--    function processData(data, tt){-->

        /* ----------- GRID ----------- */

<!--        var xGrid = svg.selectAll('path.grid').data(data[0], key);-->

<!--        xGrid-->
<!--            .enter()-->
<!--            .append('path')-->
<!--            .attr('class', '_3d grid')-->
<!--            .merge(xGrid)-->
<!--            .attr('stroke', 'black')-->
<!--            .attr('stroke-width', 0.3)-->
<!--            .attr('fill', function(d){ return d.ccw ? 'lightgrey' : '#717171'; })-->
<!--            .attr('fill-opacity', 0.9)-->
<!--            .attr('d', grid3d.draw);-->

<!--        xGrid.exit().remove();-->

        /* ----------- POINTS ----------- */

<!--        var points = svg.selectAll('circle').data(data[1], key);-->

<!--        points-->
<!--            .enter()-->
<!--            .append('circle')-->
<!--            .attr('class', '_3d')-->
<!--            .attr('opacity', 0)-->
<!--            .attr('cx', posPointX)-->
<!--            .attr('cy', posPointY)-->
<!--            .merge(points)-->
<!--            .transition().duration(tt)-->
<!--            .attr('r', 3)-->
<!--            .attr('stroke', function(d){ return d3.color(color(d.id)).darker(3); })-->
<!--            .attr('fill', function(d){ return color(d.id); })-->
<!--            .attr('opacity', 1)-->
<!--            .attr('cx', posPointX)-->
<!--            .attr('cy', posPointY);-->

<!--        points.exit().remove();-->

        /* ----------- y-Scale ----------- */

<!--        var yScale = svg.selectAll('path.yScale').data(data[2]);-->

<!--        yScale-->
<!--            .enter()-->
<!--            .append('path')-->
<!--            .attr('class', '_3d yScale')-->
<!--            .merge(yScale)-->
<!--            .attr('stroke', 'black')-->
<!--            .attr('stroke-width', .5)-->
<!--            .attr('d', yScale3d.draw);-->

<!--        yScale.exit().remove();-->

         /* ----------- y-Scale Text ----------- */

<!--        var yText = svg.selectAll('text.yText').data(data[2][0]);-->

<!--        yText-->
<!--            .enter()-->
<!--            .append('text')-->
<!--            .attr('class', '_3d yText')-->
<!--            .attr('dx', '.3em')-->
<!--            .merge(yText)-->
<!--            .each(function(d){-->
<!--                d.centroid = {x: d.rotated.x, y: d.rotated.y, z: d.rotated.z};-->
<!--            })-->
<!--            .attr('x', function(d){ return d.projected.x; })-->
<!--            .attr('y', function(d){ return d.projected.y; })-->
<!--            .text(function(d){ return d[1] <= 0 ? d[1] : ''; });-->

<!--        yText.exit().remove();-->

<!--        d3.selectAll('._3d').sort(d3._3d().sort);-->
<!--    }-->

<!--    function posPointX(d){-->
<!--        return d.projected.x;-->
<!--    }-->

<!--    function posPointY(d){-->
<!--        return d.projected.y;-->
<!--    }-->

<!--	function init(){-->
<!--        var cnt = 0;-->
<!--        xGrid = [], scatter = [], yLine = [];-->
<!--        for(var z = -j; z < j; z++){-->
<!--            for(var x = -j; x < j; x++){-->
<!--                xGrid.push([x, 1, z]);-->
<!--                scatter.push({x: x, y: d3.randomUniform(0, -10)(), z: z, id: 'point_' + cnt++});-->
<!--            }-->
<!--        }-->

<!--        d3.range(-1, 11, 1).forEach(function(d){ yLine.push([-j, -d, -j]); });-->

<!--        var data = [-->
<!--            grid3d(xGrid),-->
<!--            point3d(scatter),-->
<!--            yScale3d([yLine])-->
<!--        ];-->
<!--        processData(data, 1000);-->
<!--    }-->

<!--    function dragStart(){-->
<!--        mx = d3.event.x;-->
<!--        my = d3.event.y;-->
<!--    }-->

<!--    function dragged(){-->
<!--        mouseX = mouseX || 0;-->
<!--        mouseY = mouseY || 0;-->
<!--        beta   = (d3.event.x - mx + mouseX) * Math.PI / 230 ;-->
<!--        alpha  = (d3.event.y - my + mouseY) * Math.PI / 230  * (-1);-->
<!--        var data = [-->
<!--             grid3d.rotateY(beta + startAngle).rotateX(alpha - startAngle)(xGrid),-->
<!--            point3d.rotateY(beta + startAngle).rotateX(alpha - startAngle)(scatter),-->
<!--            yScale3d.rotateY(beta + startAngle).rotateX(alpha - startAngle)([yLine]),-->
<!--        ];-->
<!--        processData(data, 0);-->
<!--    }-->

<!--    function dragEnd(){-->
<!--        mouseX = d3.event.x - mx + mouseX;-->
<!--        mouseY = d3.event.y - my + mouseY;-->
<!--    }-->

<!--    d3.selectAll('button').on('click', init);-->

<!--    init();-->
<!--</script>-->












<!--下記データを表示できた-->
<!--<script>-->
<!--    var origin  = [400, 200], alpha = Math.PI/4, beta = 0.615472907, data = [], max = 4, min = -max, rad = Math.PI/180;-->
 
// svgタグにグラフを描くので、HTMLファイルのどこかにsvgタグがないといけません。
<!--var svg     = d3.select('svg');-->
<!--var color   = d3.scaleOrdinal(d3.schemeCategory10);-->
 
// 5つの折れ線グラフのデータをランダムに作成します。
// var rn      = function(min, max){ return Math.round(d3.randomUniform(min, max + 1)()); };

// % @blogs.each do |blog| %>
//     var md = blog.occupation;
//     var oc = blog.occupation;
//     var pr = blog.prefecture;
//     %= blog.occupation %>
//     %= blog.occupation %>
//     %= blog.prefecture %>
    // % end %>
    
    // %  mb = Blog.find(1).occupation %>
    // %  ob = Blog.find(1).occupation %>
    // %  pb = Blog.find(1).occupation %>
    // %  mz = Blog.find(2).occupation %>
    // %  oz = Blog.find(2).occupation %>
    // %  pz = Blog.find(2).occupation %>
    
    
    
<!--d3.range(0, 50, 1).forEach(function(){-->
    // (x, y, z)の値を、7セット、配列で保持します。これが1つの折れ線になります。
    // @dot = Blog.order(:prefecture DESC).limit(3)
    // remap = @dot.map{|k,v,,s|{ prefecture: k, occupation: v, emotion: s }}
    
    
     
    //  var o = [
    //     [ md,      oc      , pr],
    // ];
    
<!--    var o = [-->
<!--    <% @blogs.each do |blog| %>-->
<!--        [<%= blog.occupation %>, <%= blog.prefecture %>, <%= blog.prefecture %>],-->
<!--    <% end %>-->
<!--    ];-->
    // var o = [
    //     [ 3,      0      , i],
    //     [ 2, rn(min, max), i],
    //     [ 1, rn(min, max), i],
    //     [ 0, rn(min, max), i],
    //     [-1, rn(min, max), i],
    //     [-2, rn(min, max), i],
    //     [-3,      0      , i]
    // ];
    
     
 
    
<!--    data.push(o);-->
   
     // 変数dataに折れ線のデータを登録
<!--});-->
 

// グラフの描画
<!--function processData(data){-->
<!--  var linesStrip = svg.selectAll('path').data(data);-->
<!--  linesStrip-->
<!--    .enter()-->
<!--    .append('path')-->
<!--    .merge(linesStrip)-->
<!--    .attr('fill', 'none')-->
<!--    .attr('stroke', function(d, i){ return color(i); })-->
<!--    .attr('stroke-width', 2)-->
<!--    .sort(function(a, b){ return b[0].rotated.z - a[0].rotated.z; })-->
<!--    .attr('d', _3d.draw);-->
    
<!--  linesStrip.exit().remove();-->
<!--}-->


 
// D3-3Dのオブジェクトを作成します。
var _3d = d3._3d() //constructs a new function object with default settings
    .scale(20) // scaleは、グラフの拡大率です。
<!--    .origin(origin)-->
    .shape('LINE_STRIP') // A continous line is represented by the <path> element.
    // 'POINT'をここで使えばよいだろう。A point is represented by the <circle> element.
<!--    .rotateX(alpha)-->
<!--    .rotateY(beta);-->
 
<!--var data3D = _3d(data);-->
 
<!--processData(data);-->
 
// グラフのY軸を、一定間隔で回転させます。
<!--setInterval(function(){-->
<!--    beta += rad;-->
<!--    processData(_3d.rotateX(beta)(data));-->
<!--}, 40);-->
<!--</script>-->
<!--上記データを表示できた-->































//表示のためにいろいろと変更を試みたもの↓
<!--<script>-->
<!--    var origin  = [400, 200], alpha = Math.PI/4, beta = 0.615472907, data = [], max = 4, min = -max, rad = Math.PI/180;-->
 
// svgタグにグラフを描くので、HTMLファイルのどこかにsvgタグがないといけません。
<!--var svg     = d3.select('svg');-->
<!--var color   = d3.scaleOrdinal(d3.schemeCategory10);-->
 
// 5つの折れ線グラフのデータをランダムに作成します。

<!--d3.range(0,50,1).forEach(function(){-->
    // (x, y, z)の値を、7セット、配列で保持します。これが1つの折れ線になります。
    // @dot = Blog.order(:prefecture DESC).limit(3)
    // remap = @dot.map{|k,v,,s|{ prefecture: k, occupation: v, emotion: s }}
    
<!--    var o = [-->
<!--        [ 3,      0      , 5],-->
<!--        [ 2,      2      , 2],-->
<!--        [ 7,      2      , 6],-->
<!--        [ 4,      9      , 1],-->
<!--        [ 2,      2      , 7],-->
<!--        [ 8,      1      , 5],-->
<!--        [ 2,      6      , 3]-->
<!--    ];-->
<!--    data.push(o);-->
   
     // 変数dataに折れ線のデータを登録
<!--});-->
 

// グラフの描画
<!--function processData(data){-->
//   linesStrip.exit().remove();
    
<!--  var points = svg.selectAll('circle').data(data);-->
<!--  points-->
<!--    .enter()-->
<!--    .append('circle')-->
<!--    .merge(points)-->
<!--    .attr('r',1)-->
<!--    .attr('opacity',1)-->
<!--    .x(function(d){ return d; })-->
<!--    .y(function(d){ return d; })-->
<!--    .z(function(d){ return d; })-->
<!--    .attr('d', _3d.draw);-->
<!--  points.exit().remove();    -->

<!--}-->


 
// D3-3Dのオブジェクトを作成します。
var _3d = d3._3d() //constructs a new function object with default settings
    .scale(10) // scaleは、グラフの拡大率です。
<!--    .origin(origin)-->
    .shape('POINTS') // A continous line is represented by the <path> element.
<!--    .rotateX(alpha)-->
<!--    .rotateY(beta);-->
    
    
    // 'POINT'をここで使えばよいだろう。A point is represented by the <circle> element.
    
 
<!--var data3D = _3d(data);-->
 
<!--processData(data3D);-->
 
// グラフのY軸を、一定間隔で回転させます。
<!--setInterval(function(){-->
<!--    beta += rad;-->
<!--    processData(_3d.rotateX(beta)(data));-->
<!--}, 40);-->
<!--</script>-->
//表示のためにいろいろと変更を試みたもの↑







<!--</style>-->
<!--<button>update</button>-->
<!--<script>-->
<!--    var origin = [480, 300], j = 10, scale = 20, scatter = [], yLine = [], xGrid = [], beta = 0, alpha = 0, key = function(d){ return d.id; }, startAngle = Math.PI/4;-->
<!--    var svg    = d3.select('svg').call(d3.drag().on('drag', dragged).on('start', dragStart).on('end', dragEnd)).append('g');-->
<!--    var color  = d3.scaleOrdinal(d3.schemeCategory20);-->
<!--    var mx, my, mouseX, mouseY;-->

    var grid3d = d3._3d() //おそらく底面を作っている
        .shape('GRID', 20) //gridを決めている
<!--        .origin(origin)-->
<!--        .rotateY( startAngle)-->
<!--        .rotateX(-startAngle)-->
<!--        .scale(scale);-->

<!--    var point3d = d3._3d()-->
        .x(function(d){ return d.x; })   //おそらくpointを指定しているx地点
        .y(function(d){ return d.y; })   //おそらくpointを指定しているy地点
        .z(function(d){ return d.z; })   //おそらくpointを指定しているz地点
<!--        .origin(origin)-->
<!--        .rotateY( startAngle)-->
<!--        .rotateX(-startAngle)-->
<!--        .scale(scale);-->

    var yScale3d = d3._3d()  //おそらくy軸方向の軸を作っている
        .shape('LINE_STRIP')  //形状決定
<!--        .origin(origin)-->
<!--        .rotateY( startAngle)-->
<!--        .rotateX(-startAngle)-->
<!--        .scale(scale);-->

<!--    function processData(data, tt){-->

        /* ----------- GRID ----------- */

<!--        var xGrid = svg.selectAll('path.grid').data(data[0], key);-->

<!--        xGrid-->
            .enter()   //新しく生成した要素を更新
<!--            .append('path')-->
<!--            .attr('class', '_3d grid')-->
<!--            .merge(xGrid)-->
            .attr('stroke', 'black')    //grid線の色かな？
<!--            .attr('stroke-width', 0.3)-->
            .attr('fill', function(d){ return d.ccw ? 'lightgrey' : '#717171'; })    //grid面の色かな？
<!--            .attr('fill-opacity', 0.9)-->
<!--            .attr('d', grid3d.draw);-->

<!--        xGrid.exit().remove();-->

        /* ----------- POINTS ----------- */

<!--        var points = svg.selectAll('circle').data(data[1], key);-->

<!--        points-->
<!--            .enter()-->
<!--            .append('circle')-->
<!--            .attr('class', '_3d')-->
<!--            .attr('opacity', 0)-->
<!--            .attr('cx', posPointX)-->
<!--            .attr('cy', posPointY)-->
<!--            .merge(points)-->
<!--            .transition().duration(tt)-->
<!--            .attr('r', 3)-->
<!--            .attr('stroke', function(d){ return d3.color(color(d.id)).darker(3); })-->
<!--            .attr('fill', function(d){ return color(d.id); })-->
<!--            .attr('opacity', 1)-->
<!--            .attr('cx', posPointX)-->
<!--            .attr('cy', posPointY);-->

<!--        points.exit().remove();-->

        /* ----------- y-Scale ----------- */

        var yScale = svg.selectAll('path.yScale').data(data[2]); //selectionは'path.yScale'の選択を意味する

<!--        yScale-->
<!--            .enter()-->
<!--            .append('path')-->
<!--            .attr('class', '_3d yScale')-->
<!--            .merge(yScale)-->
<!--            .attr('stroke', 'black')-->
<!--            .attr('stroke-width', .5)-->
<!--            .attr('d', yScale3d.draw);-->

<!--        yScale.exit().remove();-->

         /* ----------- y-Scale Text ----------- */

<!--        var yText = svg.selectAll('text.yText').data(data[2][0]);-->

<!--        yText-->
<!--            .enter()-->
<!--            .append('text')-->
<!--            .attr('class', '_3d yText')-->
<!--            .attr('dx', '.3em')-->
<!--            .merge(yText)-->
<!--            .each(function(d){-->
<!--                d.centroid = {x: d.rotated.x, y: d.rotated.y, z: d.rotated.z};-->
<!--            })-->
<!--            .attr('x', function(d){ return d.projected.x; })-->
<!--            .attr('y', function(d){ return d.projected.y; })-->
<!--            .text(function(d){ return d[1] <= 0 ? d[1] : ''; });-->

<!--        yText.exit().remove();-->

<!--        d3.selectAll('._3d').sort(d3._3d().sort);-->
<!--    }-->

<!--    function posPointX(d){-->
<!--        return d.projected.x;-->
<!--    }-->

<!--    function posPointY(d){-->
<!--        return d.projected.y;-->
<!--    }-->

<!--	function init(){-->
<!--        var cnt = 0;-->
<!--        xGrid = [], scatter = [], yLine = [];-->
<!--        for(var z = -j; z < j; z++){-->
<!--            for(var x = -j; x < j; x++){-->
<!--                xGrid.push([x, 1, z]);-->
<!--                scatter.push({x: x, y: d3.randomUniform(0, -10)(), z: z, id: 'point_' + cnt++});-->
        
            
        
<!--            }-->
<!--        }-->

<!--        d3.range(-1, 11, 1).forEach(function(d){ yLine.push([-j, -d, -j]); });-->

<!--        var data = [-->
<!--            grid3d(xGrid),-->
<!--            point3d(scatter),-->
<!--            yScale3d([yLine])-->
<!--        ];-->
<!--        processData(data, 1000);-->
        
        // var data = [
        //     % @blogs.each do |blog| %>
        //     [%= blog.occupation %>, %= blog.prefecture %>, %= blog.prefecture %>],
        //     % end %>
        //     ];
        // processData(data);
        
        
<!--    }-->

<!--    function dragStart(){-->
<!--        mx = d3.event.x;-->
<!--        my = d3.event.y;-->
<!--    }-->

<!--    function dragged(){-->
<!--        mouseX = mouseX || 0;-->
<!--        mouseY = mouseY || 0;-->
<!--        beta   = (d3.event.x - mx + mouseX) * Math.PI / 230 ;-->
<!--        alpha  = (d3.event.y - my + mouseY) * Math.PI / 230  * (-1);-->
<!--        var data = [-->
<!--             grid3d.rotateY(beta + startAngle).rotateX(alpha - startAngle)(xGrid),-->
<!--            point3d.rotateY(beta + startAngle).rotateX(alpha - startAngle)(scatter),-->
<!--            yScale3d.rotateY(beta + startAngle).rotateX(alpha - startAngle)([yLine]),-->
<!--        ];-->
<!--        processData(data, 0);-->
<!--    }-->

<!--    function dragEnd(){-->
<!--        mouseX = d3.event.x - mx + mouseX;-->
<!--        mouseY = d3.event.y - my + mouseY;-->
<!--    }-->

<!--    d3.selectAll('button').on('click', init);-->

<!--    init();-->
<!--</script>-->


<!--<div id="container" style="width: 680px; height: 550px; margin: 0 auto"></div>-->
<!--    <script language="JavaScript">-->
<!--    window.onload = function() {-->
<!--Highcharts.setOptions({-->
<!--    colors: Highcharts.getOptions().colors.map(function (color) {-->
<!--        return {-->
<!--            radialGradient: {-->
<!--                cx: 0.4,-->
<!--                cy: 0.3,-->
<!--                r: 0.5-->
<!--            },-->
<!--            stops: [-->
<!--                [0, color],-->
<!--                [1, Highcharts.color(color).brighten(-0.2).get('rgb')]-->
<!--            ]-->
<!--        };-->
<!--    })-->
<!--});-->
<!--var chart = new Highcharts.Chart({-->
<!--    chart: {-->
<!--        renderTo: 'container',-->
<!--        margin: 100,-->
<!--        type: 'scatter3d',-->
<!--        animation: false,-->
<!--        options3d: {-->
<!--            enabled: true,-->
<!--            alpha: 10,-->
<!--            beta: 30,-->
<!--            depth: 250,-->
<!--            viewDistance: 5,-->
<!--            fitToPlot: false,-->
<!--            frame: {-->
<!--                bottom: { size: 1, color: 'rgba(0,0,0,0.02)' },-->
<!--                back: { size: 1, color: 'rgba(0,0,0,0.04)' },-->
<!--                side: { size: 1, color: 'rgba(0,0,0,0.06)' }-->
<!--            }-->
<!--        }-->
<!--    },-->
<!--    title: {-->
<!--        text: 'Draggable box'-->
<!--    },-->
<!--    subtitle: {-->
<!--        text: 'Click and drag the plot area to rotate in space'-->
<!--    },-->
<!--    plotOptions: {-->
<!--        scatter: {-->
<!--            width: 10,-->
<!--            height: 10,-->
<!--            depth: 10-->
<!--        }-->
<!--    },-->
<!--     yAxis: {-->
<!--        min: 0,-->
<!--        max: 10,-->
<!--        title: null-->
<!--    },-->
<!--    xAxis: {-->
<!--        min: 0,-->
<!--        max: 10,-->
<!--        gridLineWidth: 1-->
<!--    },-->
<!--    zAxis: {-->
<!--        min: 0,-->
<!--        max: 10,-->
<!--        showFirstLabel: false-->
<!--    },-->
<!--    legend: {-->
<!--        enabled: false-->
<!--    },-->
<!--    series: [{-->
<!--        name: 'Data',-->
<!--        colorByPoint: true,-->
<!--        accessibility: {-->
<!--            exposeAsGroupOnly: true-->
<!--        },-->
<!--        data: [-->
<!--           [1, 6, 5], [8, 7, 9], [1, 3, 4], [4, 6, 8], [5, 7, 7], [6, 9, 6],-->
<!--            [7, 0, 5], [2, 3, 3], [3, 9, 8], [3, 6, 5], [4, 9, 4], [2, 3, 3],-->
<!--            [6, 9, 9], [0, 7, 0], [7, 7, 9], [7, 2, 9], [0, 6, 2], [4, 6, 7],-->
<!--            [3, 7, 7], [0, 1, 7], [2, 8, 6], [2, 3, 7], [6, 4, 8], [3, 5, 9],-->
<!--            [7, 9, 5], [3, 1, 7], [4, 4, 2], [3, 6, 2], [3, 1, 6], [6, 8, 5],-->
<!--            [6, 6, 7], [4, 1, 1], [7, 2, 7], [7, 7, 0], [8, 8, 9], [9, 4, 1],-->
<!--            [8, 3, 4], [9, 8, 9], [3, 5, 3], [0, 2, 4], [6, 0, 2], [2, 1, 3],-->
<!--            [5, 8, 9], [2, 1, 1], [9, 7, 6], [3, 0, 2], [9, 9, 0], [3, 4, 8],-->
<!--            [2, 6, 1], [8, 9, 2], [7, 6, 5], [6, 3, 1], [9, 3, 1], [8, 9, 3],-->
<!--            [9, 1, 0], [3, 8, 7], [8, 0, 0], [4, 9, 7], [8, 6, 2], [4, 3, 0],-->
<!--            [2, 3, 5], [9, 1, 4], [1, 1, 4], [6, 0, 2], [6, 1, 6], [3, 8, 8],-->
<!--            [8, 8, 7], [5, 5, 0], [3, 9, 6], [5, 4, 3], [6, 8, 3], [0, 1, 5],-->
<!--            [6, 7, 3], [8, 3, 2], [3, 8, 3], [2, 1, 6], [4, 6, 7], [8, 9, 9],-->
<!--            [5, 4, 2], [6, 1, 3], [6, 9, 5], [4, 8, 2], [9, 7, 4], [5, 4, 2],-->
<!--            [9, 6, 1], [2, 7, 3], [4, 5, 4], [6, 8, 1], [3, 4, 0], [2, 2, 6],-->
<!--            [5, 1, 2], [9, 9, 7], [6, 9, 9], [8, 4, 3], [4, 1, 7], [6, 2, 5],-->
<!--            [0, 4, 9], [3, 5, 9], [6, 9, 1], [1, 9, 2]]-->
<!--    }]-->
<!--});-->
<!--(function (H) {-->
<!--    function dragStart(eStart) {-->
<!--        eStart = chart.pointer.normalize(eStart);-->

<!--        var posX = eStart.chartX,-->
<!--            posY = eStart.chartY,-->
<!--            alpha = chart.options.chart.options3d.alpha,-->
<!--            beta = chart.options.chart.options3d.beta,-->
            sensitivity = 5,  // lower is more sensitive
<!--            handlers = [];-->

<!--        function drag(e) {-->
            // Get e.chartX and e.chartY
<!--            e = chart.pointer.normalize(e);-->

<!--            chart.update({-->
<!--                chart: {-->
<!--                    options3d: {-->
<!--                        alpha: alpha + (e.chartY - posY) / sensitivity,-->
<!--                        beta: beta + (posX - e.chartX) / sensitivity-->
<!--                    }-->
<!--                }-->
<!--            }, undefined, undefined, false);-->
<!--        }-->

<!--        function unbindAll() {-->
<!--            handlers.forEach(function (unbind) {-->
<!--                if (unbind) {-->
<!--                    unbind();-->
<!--                }-->
<!--            });-->
<!--            handlers.length = 0;-->
<!--        }-->
<!--        handlers.push(H.addEvent(document, 'mousemove', drag));-->
<!--        handlers.push(H.addEvent(document, 'touchmove', drag));-->


<!--        handlers.push(H.addEvent(document, 'mouseup', unbindAll));-->
<!--        handlers.push(H.addEvent(document, 'touchend', unbindAll));-->
<!--    }-->
<!--    H.addEvent(chart.container, 'mousedown', dragStart);-->
<!--    H.addEvent(chart.container, 'touchstart', dragStart);-->
<!--}(Highcharts));-->
<!--}-->
<!--</script>-->
    
    <!--<div id="container" style="width: 680px; height: 550px; margin: 0 auto"></div>-->
    <!--<script language="JavaScript">-->
    <!--    window.onload = function() {-->
    <!--        Highcharts.chart('container', {-->
                // グラフ属性設定
                // 各属性の詳細：https://api.highcharts.com/highcharts/
    <!--            title : {-->
    <!--                text: '商品A～商品Eの2018年度月間売上'   -->
    <!--            },-->
    <!--            xAxis : {-->
    <!--                categories: ['1月', '2月', '3月', '4月', '5月', '6月', '7月', '8月', '9月', '10月', '11月', '12月']-->
    <!--            },-->
    <!--            yAxis : {-->
    <!--                title: {-->
    <!--                    text: '売上高 (万円)'-->
    <!--                },-->
    <!--                plotLines: [{-->
    <!--                    value: 0,-->
    <!--                    width: 1,-->
    <!--                    color: '#808080'-->
    <!--                }]-->
    <!--            },-->
    <!--            tooltip : {-->
    <!--                valueSuffix: '万円'-->
    <!--            },-->
    <!--            legend : {-->
    <!--                layout: 'vertical',-->
    <!--                align: 'right',-->
    <!--                verticalAlign: 'middle',-->
    <!--                borderWidth: 0-->
    <!--            },-->
    <!--            series : [-->
    <!--                {-->
    <!--                    name: '商品A',-->
    <!--                    data: [23.5, 32.2, 45.6, 20.3, 15.3, 56.4, 49.9, 53.5, 55.5, 33.2, 46.3, 43.2]-->
    <!--                },-->
    <!--                {-->
    <!--                    name: '商品B',-->
    <!--                    data: [15.3, 18.2, 25.7, 23.1, 26.9, 27.4, 30.5, 38.6, 40.2, 48.3, 35.2, 25.4]-->
    <!--                }, -->
    <!--                {-->
    <!--                    name: '商品C',-->
    <!--                    data: [18.5, 22.5, 29.3, 37.1, 39.3, 45.8, 44.3, 48.2, 43.6, 40.3, 37.7, 33.0]-->
    <!--                },-->
    <!--                {-->
    <!--                    name: '商品D',-->
    <!--                    data: [7.2, 6.3, 8.9, 10.2, 12.5, 16.2, 18.2, 17.3, 16.5, 12.8, 10.3, 13.9]-->
    <!--                },-->
    <!--                {-->
    <!--                    name: '商品E',-->
    <!--                    data: [36.6, 37.2, 39.1, 30.2, 30.9, 28.3, 25.3, 24.8, 23.3, 20.7, 18.3, 19.7]-->
    <!--                }-->
    <!--            ],-->
                
    <!--            responsive: {-->
    <!--                rules: [{-->
    <!--                    condition: {-->
    <!--                        maxWidth: 600-->
    <!--                    },-->
    <!--                    chartOptions: {-->
    <!--                        legend: {-->
    <!--                            layout: 'horizontal',-->
    <!--                            align: 'center',-->
    <!--                            verticalAlign: 'bottom'-->
    <!--                        }-->
    <!--                    }-->
    <!--                }]-->
    <!--            }-->
    <!--        });-->
    <!--    }-->
    <!--</script>-->
    
    
    <div id="container" style="width: 680px; height: 550px; margin: 0 auto"></div>
    <script language="JavaScript">
    window.onload = function() {
Highcharts.setOptions({
    colors: Highcharts.getOptions().colors.map(function (color) {
        return {
            radialGradient: {
                cx: 0.4,
                cy: 0.3,
                r: 0.5
            },
            stops: [
                [0, color],
                [1, Highcharts.color(color).brighten(-0.2).get('rgb')]
            ]
        };
    })
});
var fcolor = 'red'
var chart = new Highcharts.Chart({
    chart: {
        renderTo: 'container',
        margin: 100,
        type: 'scatter3d',
        animation: false,
        options3d: {
            enabled: true,
            alpha: 10,
            beta: 30,
            depth: 250,
            viewDistance: 5,
            fitToPlot: false,
            frame: {
                bottom: { size: 1, color: 'rgba(0,0,0,0.02)' },
                back: { size: 1, color: 'rgba(0,0,0,0.04)' },
                side: { size: 1, color: 'rgba(0,0,0,0.06)' }
            }
        }
    },
    title: {
        text: 'Draggable box'
    },
    subtitle: {
        text: 'Click and drag the plot area to rotate in space'
    },
    plotOptions: {
        scatter: {
            width: 10,
            height: 10,
            depth: 10
        }
    },
     yAxis: {
        min: 0,
        max: 10,
        title: null
    },
    xAxis: {
        min: 0,
        max: 10,
        gridLineWidth: 1
    },
    zAxis: {
        min: 0,
        max: 10,
        showFirstLabel: false
    },
    legend: {
        enabled: false
    },
    
    series: [{
        name: 'Data',
        colorByPoint: true,
        accessibility: {
            exposeAsGroupOnly: true
        },
        data: [
            
          {x:<%= Blog.find(1).prefecture %>, y:<%= Blog.find(1).prefecture %>, z:<%= Blog.find(1).prefecture %>,marker: { fillColor: fcolor}}
          // [<%= Blog.find(1).prefecture %>, <%= Blog.find(1).prefecture %>, <%= Blog.find(1).prefecture %>]
           ]
    }]
});
(function (H) {
    function dragStart(eStart) {
        eStart = chart.pointer.normalize(eStart);

        var posX = eStart.chartX,
            posY = eStart.chartY,
            alpha = chart.options.chart.options3d.alpha,
            beta = chart.options.chart.options3d.beta,
            sensitivity = 5,  // lower is more sensitive
            handlers = [];

        function drag(e) {
            // Get e.chartX and e.chartY
            e = chart.pointer.normalize(e);

            chart.update({
                chart: {
                    options3d: {
                        alpha: alpha + (e.chartY - posY) / sensitivity,
                        beta: beta + (posX - e.chartX) / sensitivity
                    }
                }
            }, undefined, undefined, false);
        }

        function unbindAll() {
            handlers.forEach(function (unbind) {
                if (unbind) {
                    unbind();
                }
            });
            handlers.length = 0;
        }
        handlers.push(H.addEvent(document, 'mousemove', drag));
        handlers.push(H.addEvent(document, 'touchmove', drag));


        handlers.push(H.addEvent(document, 'mouseup', unbindAll));
        handlers.push(H.addEvent(document, 'touchend', unbindAll));
    }
    H.addEvent(chart.container, 'mousedown', dragStart);
    H.addEvent(chart.container, 'touchstart', dragStart);
}(Highcharts));
}
</script>